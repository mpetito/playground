/* tslint:disable */
/* eslint-disable */
/**
 * Playground
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomersCreateForm,
    CustomersCreateFormFromJSON,
    CustomersCreateFormToJSON,
    CustomersGetAllResult,
    CustomersGetAllResultFromJSON,
    CustomersGetAllResultToJSON,
    CustomersGetByIdResult,
    CustomersGetByIdResultFromJSON,
    CustomersGetByIdResultToJSON,
    CustomersUpdateForm,
    CustomersUpdateFormFromJSON,
    CustomersUpdateFormToJSON,
} from '../models';

export interface CustomerGetRequest {
    page?: number;
    pageSize?: number;
}

export interface CustomerIdGetRequest {
    id: number;
}

export interface CustomerIdPostRequest {
    id: number;
    customersUpdateForm?: CustomersUpdateForm;
}

export interface CustomerPostRequest {
    customersCreateForm?: CustomersCreateForm;
}

/**
 * 
 */
export class CustomerApi extends runtime.BaseAPI {

    /**
     */
    async customerGetRaw(requestParameters: CustomerGetRequest): Promise<runtime.ApiResponse<CustomersGetAllResult>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Customer`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomersGetAllResultFromJSON(jsonValue));
    }

    /**
     */
    async customerGet(requestParameters: CustomerGetRequest): Promise<CustomersGetAllResult> {
        const response = await this.customerGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async customerIdGetRaw(requestParameters: CustomerIdGetRequest): Promise<runtime.ApiResponse<CustomersGetByIdResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customerIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Customer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomersGetByIdResultFromJSON(jsonValue));
    }

    /**
     */
    async customerIdGet(requestParameters: CustomerIdGetRequest): Promise<CustomersGetByIdResult> {
        const response = await this.customerIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async customerIdPostRaw(requestParameters: CustomerIdPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling customerIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Customer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomersUpdateFormToJSON(requestParameters.customersUpdateForm),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customerIdPost(requestParameters: CustomerIdPostRequest): Promise<void> {
        await this.customerIdPostRaw(requestParameters);
    }

    /**
     */
    async customerPostRaw(requestParameters: CustomerPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Customer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomersCreateFormToJSON(requestParameters.customersCreateForm),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customerPost(requestParameters: CustomerPostRequest): Promise<void> {
        await this.customerPostRaw(requestParameters);
    }

}
